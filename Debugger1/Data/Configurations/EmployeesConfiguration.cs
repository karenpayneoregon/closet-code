// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Debugger1.Data;
using Debugger1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace Debugger1.Data.Configurations
{
    public partial class EmployeesConfiguration : IEntityTypeConfiguration<Employees>
    {
        public void Configure(EntityTypeBuilder<Employees> entity)
        {
            entity.HasKey(e => e.EmployeeID);

            entity.HasIndex(e => e.ContactTypeIdentifier, "IX_Employees_ContactTypeIdentifier");

            entity.HasIndex(e => e.CountryIdentifier, "IX_Employees_CountryIdentifier");

            entity.HasIndex(e => e.ReportsToNavigationEmployeeID, "IX_Employees_ReportsToNavigationEmployeeID");

            entity.Property(e => e.Address).HasMaxLength(60);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.City).HasMaxLength(15);
            entity.Property(e => e.Extension).HasMaxLength(4);
            entity.Property(e => e.FirstName)
            .IsRequired()
            .HasMaxLength(10);
            entity.Property(e => e.HireDate).HasColumnType("datetime");
            entity.Property(e => e.HomePhone).HasMaxLength(24);
            entity.Property(e => e.LastName)
            .IsRequired()
            .HasMaxLength(20);
            entity.Property(e => e.PostalCode).HasMaxLength(10);
            entity.Property(e => e.Region).HasMaxLength(15);
            entity.Property(e => e.TitleOfCourtesy).HasMaxLength(25);

            entity.HasOne(d => d.ContactTypeIdentifierNavigation).WithMany(p => p.Employees)
            .HasForeignKey(d => d.ContactTypeIdentifier)
            .HasConstraintName("FK_Employees_ContactType");

            entity.HasOne(d => d.CountryIdentifierNavigation).WithMany(p => p.Employees)
            .HasForeignKey(d => d.CountryIdentifier)
            .HasConstraintName("FK_Employees_Countries");

            entity.HasOne(d => d.ReportsToNavigationEmployee).WithMany(p => p.InverseReportsToNavigationEmployee).HasForeignKey(d => d.ReportsToNavigationEmployeeID);

            entity.HasMany(d => d.Territory).WithMany(p => p.Employee)
            .UsingEntity<Dictionary<string, object>>(
                "EmployeeTerritories",
                r => r.HasOne<Territories>().WithMany()
                    .HasForeignKey("TerritoryID")
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTerritories_Territories"),
                l => l.HasOne<Employees>().WithMany()
                    .HasForeignKey("EmployeeID")
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EmployeeTerritories_Employees"),
                j =>
                {
                    j.HasKey("EmployeeID", "TerritoryID").IsClustered(false);
                    j.HasIndex(new[] { "TerritoryID" }, "IX_EmployeeTerritories_TerritoryID");
                    j.IndexerProperty<string>("TerritoryID").HasMaxLength(20);
                });

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Employees> entity);
    }
}
